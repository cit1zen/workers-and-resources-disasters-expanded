include("core/SOVIETInstructions.txt");
include("core/Math.txt");
include("core/Explosion.txt");
include("disasters/GrainSiloExplosion.txt");


defineVariable(int, _random_value);
defineVariable(int, _building_count);
defineVariable(int, _building_index);
defineArray(int[200], _valid_buildings);
defineVariable(int, _valid_buildings_max_size);
defineVariable(int, _valid_buildings_current_size);
defineVariable(Building, _building);
defineVariable(Resources, _building_actual);
defineVariable(Resources, _building_capacity);


defineFunction(main, void)
{
	InitConstants();

    _valid_buildings_max_size = 200;
    _valid_buildings_current_size = 0;

	Building_GetNumberOfBuildings(_building_count);
	_building_index = 0;
	while (_building_index < _building_count) {
        // Get data
        _building.GetDataByIndex(_building_index);
        _building_actual.GetFromBuilding(_building_index);
        _building_capacity.GetCapacityFromBuilding(_building_index);
        if (CheckIfValidForGrainSiloExplosion(
            _building,
            _building_actual,
            _building_capacity
            )
        ) {
            if (_valid_buildings_current_size < _valid_buildings_max_size) {
                _valid_buildings[_valid_buildings_current_size] = _building_index;
                _valid_buildings_current_size = _valid_buildings_current_size + 1;
            }
            else () {
                Random(_random_value);
                _valid_buildings[_random_value % 100] = _building_index;
            }
        }
        _building_index = _building_index + 1;
    }

    // Check if we found anything
    if (_valid_buildings_current_size < 1) {
        end();
    }

    // Choose one of the buildings as an epicentre of explosion
    Random(_random_value);
    _building_index = _valid_buildings[_random_value % _valid_buildings_current_size];

    SimulateGrainSiloExplosion(
        _building_index
    );
    end();
}